export namespace ResourceAccessManagementModels {
    /**
     *
     * @export
     * @class RequiredError
     * @extends {Error}
     */
    export class RequiredError extends Error {
        name: "RequiredError" = "RequiredError";
        constructor(public field: string, msg?: string) {
            super(msg);
        }
    }

    /**
     * An identifier for a specific version of a resource.
     * @export
     * ! fix: manual fix from interface to type on 3/3/2022
     * @type ETag
     */
    export type ETag = number;

    /**
     * A descriptor for errors that are integral parts of resources.
     * @export
     * @interface MdspApiError
     */
    export interface MdspApiError {
        /**
         * Unique error code. Every code is bound to one (parametrized) message.
         * @type {string}
         * @memberof MdspApiError
         */
        code?: string;
        /**
         * Human readable error message in English.
         * @type {string}
         * @memberof MdspApiError
         */
        message?: string;
        /**
         * In case an error message is parametrized, the parameter names and values are returned for, e.g., localization purposes. The parametrized error messages are defined at the operation error response descriptions in this API specification. Parameters are denoted by named placeholders '{\\<parameter name\\>}' in the message specifications. At runtime, returned message placeholders are substituted by actual parameter values.
         * @type {Array<any>}
         * @memberof MdspApiError
         */
        messageParameters?: Array<any>;
    }

    /**
     * A descriptor for error responses.
     * @export
     * @interface MdspError
     */
    export interface MdspError extends MdspApiError {
        /**
         * Logging correlation ID for debugging purposes.
         * @type {string}
         * @memberof MdspError
         */
        logref?: string;
    }

    /**
     *
     * @export
     * @interface MdspErrors
     */
    export interface MdspErrors {
        /**
         *
         * @type {Array<MdspError>}
         * @memberof MdspErrors
         */
        errors?: Array<MdspError>;
    }

    /**
     *
     * @export
     * @interface Page
     */
    export interface Page {
        /**
         *
         * @type {number}
         * @memberof Page
         */
        size?: number;
        /**
         *
         * @type {number}
         * @memberof Page
         */
        totalElements?: number;
        /**
         *
         * @type {number}
         * @memberof Page
         */
        totalPages?: number;
        /**
         *
         * @type {number}
         * @memberof Page
         */
        number?: number;
    }

    /**
     *
     * @export
     * @interface PolicyList
     */
    export interface PolicyList {
        /**
         *
         * @type {Array<PolicyListResponse>}
         * @memberof PolicyList
         */
        policies?: Array<PolicyListResponse>;
        /**
         *
         * @type {Page}
         * @memberof PolicyList
         */
        page?: Page;
    }

    /**
     * Policy object representation in context of a list request.
     * @export
     * @interface PolicyListResponse
     */
    export interface PolicyListResponse {
        /**
         * Owner is name of tenant who owns the policy.
         * @type {string}
         * @memberof PolicyListResponse
         */
        owner: string;
        /**
         * Id is the unique identifier for this object. It is generated by the server on successful creation of a rule. It is not allowed to change on PUT operations.
         * @type {string}
         * @memberof PolicyListResponse
         */
        id: string;
        /**
         * Name is a client defined identifier. It must be unique within a tenant (owner). Cannot be updated. Populated with uid, if not set by client/user. Max. 100 characters on [a-zA-Z0-9_-].
         * @type {string}
         * @memberof PolicyListResponse
         */
        name: string;
        /**
         * Description of the policy. This is an optional property with a limit of 500 characters.
         * @type {string}
         * @memberof PolicyListResponse
         */
        description?: string;
        /**
         * Indicates whether given plicy is active or inactive.
         * @type {boolean}
         * @memberof PolicyListResponse
         */
        active: boolean;
        /**
         *
         * @type {Array<Subjects>}
         * @memberof PolicyListResponse
         */
        subjects: Array<Subjects>;
        /**
         *
         * @type {Array<any>}
         * @memberof PolicyListResponse
         */
        rules: Array<any>;
        /**
         * Indicates the date and time this policy was created. Conforms to RFC 3339.
         * @type {Date}
         * @memberof PolicyListResponse
         */
        createdAt: Date;
        /**
         * Indicates the date and time this policy was last modified. Conforms to RFC 3339.
         * @type {Date}
         * @memberof PolicyListResponse
         */
        lastModifiedAt: Date;
        /**
         * Indicates the Resource Name who created this policy.
         * @type {string}
         * @memberof PolicyListResponse
         */
        createdBy: string;
        /**
         * Indicates the Resource Name who last modified this policy.
         * @type {string}
         * @memberof PolicyListResponse
         */
        lastModifiedBy: string;
        /**
         *
         * @type {ETag}
         * @memberof PolicyListResponse
         */
        eTag: ETag;
    }

    /**
     * Policy represents the configuration of a single policy.
     * @export
     * @interface PolicyRequest
     */
    export interface PolicyRequest {
        /**
         * Name is a client defined identifier. It must be unique within a tenant (owner). Cannot be updated. Max. 100 characters on [a-zA-Z0-9_-].
         * @type {string}
         * @memberof PolicyRequest
         */
        name: string;
        /**
         * Description of the policy. This is an optional property with a limit of 500 characters.
         * @type {string}
         * @memberof PolicyRequest
         */
        description?: string;
        /**
         * Indicating whether the policy should be active or not, i.e., active policies must be enforced; non-active policies must not be enforced.
         * @type {boolean}
         * @memberof PolicyRequest
         */
        active?: boolean;
        /**
         *
         * @type {Array<Subjects>}
         * @memberof PolicyRequest
         */
        subjects: Array<Subjects>;
        /**
         *
         * @type {Array<any>}
         * @memberof PolicyRequest
         */
        rules: Array<any>;
    }

    /**
     * Policy represents the configuration of a single Policy.
     * @export
     * @interface PolicyResponse
     */
    export interface PolicyResponse {
        /**
         * The name of the tenant of the user who created this object. Populated by the system. Client provided values of this field will be ignored.
         * @type {string}
         * @memberof PolicyResponse
         */
        owner: string;
        /**
         * Id is the unique identifier for this object. It is generated by the server on successful creation of a rule. It is not allowed to change on PUT operations.
         * @type {string}
         * @memberof PolicyResponse
         */
        id: string;
        /**
         * Name is a client defined identifier. It must be unique within a tenant (owner). Cannot be updated. Populated with uid, if not set by client/user. Max. 100 characters on [a-zA-Z0-9_-].
         * @type {string}
         * @memberof PolicyResponse
         */
        name: string;
        /**
         * Description of the policy. This is an optional property with a limit of 500 characters.
         * @type {string}
         * @memberof PolicyResponse
         */
        description?: string;
        /**
         * Indicating whether the policy should be active or not, i.e., active policies must be enforced; non-active policies must not be enforced.
         * @type {boolean}
         * @memberof PolicyResponse
         */
        active: boolean;
        /**
         *
         * @type {Array<Subjects>}
         * @memberof PolicyResponse
         */
        subjects: Array<Subjects>;
        /**
         *
         * @type {Array<any>}
         * @memberof PolicyResponse
         */
        rules: Array<any>;
        /**
         * Indicates the date and time this policy was created. Conforms to RFC 3339.
         * @type {Date}
         * @memberof PolicyResponse
         */
        createdAt: Date;
        /**
         * Indicates the date and time this policy was last modified. Conforms to RFC 3339.
         * @type {Date}
         * @memberof PolicyResponse
         */
        lastModifiedAt: Date;
        /**
         * Indicates the Resource Name who created this policy.
         * @type {string}
         * @memberof PolicyResponse
         */
        createdBy: string;
        /**
         * Indicates the Resource Name who last modified this policy.
         * @type {string}
         * @memberof PolicyResponse
         */
        lastModifiedBy: string;
        /**
         *
         * @type {ETag}
         * @memberof PolicyResponse
         */
        eTag: ETag;
    }

    /**
     * Identifier describing the action that a rule is to be applied to.
     * @export
     * ! fix: manual fix from interface to type on 3/3/2022
     * @type RuleAction
     */
    export type RuleAction = string;

    /**
     * Resource path describing the resource that a rule is to be applied to.
     * @export
     * ! fix: manual fix from interface to type on 3/3/2022
     * @type RuleResource
     */
    export type RuleResource = string;

    /**
     * Resource path identifying of a subject or a group of subjects a policy is to be applied to.
     * ! fix: manual fix from interface to type on 3/3/2022
     * @export
     * @type Subjects
     */
    export type Subjects = string;
}
